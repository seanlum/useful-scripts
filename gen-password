#!/usr/bin/node
/*
 * Written by: seanlum
 * Version: 1.0.0
 * Version Date: 08-21-2019
 * 
 * This tool does not claim to generate secure passwords,
 * but it is pretty good at not repeating itself
 */

const crypto = require('crypto')
const fs = require('fs')

let password_length = 12
let password_entropy_cycles = 4
let password_entropy_characters = '!@#$%^&*ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ'

function getSlice(str) {
        return str.slice(str.indexOf('=') + 1, str.length)
}

function getHelp() {
        let help = '';
        help += '--------------------------------------------------------\n\r'
	help += 'gen-password [options]\n\r'
        help += 'Options \n\r'
        help += '    -l=\'password length\'\n\r'
	help += '        default is 12\n\r'
	help += '    -e=\'entropy cycle count\'\n\r'
	help += '        default is 4\n\r'
	help += '    --stress-test\n\r'
	help += '        generates 10,000 passwords and checks for\n\r'
	help += '        any duplicates\n\r'
        help += '\n\r'
	help += 'This tool does not claim to generate secure passwords\n\r'
        help += '--------------------------------------------------------\n\r'
        fs.writeSync(1, help, null, help.length)
}

function isHelpIsh(text) {
        return new RegExp(/h(e(l(p)?)?)?$/).test(text)
}

function getBase64() {
	return crypto.randomBytes(password_length).toString('base64').slice(0, password_length)
}

function getRandomNumber(min, max) {
	return Math.floor(Math.random() * (max - min) + min);
}

function getRandomPassword() {
	const entropy_min = Math.floor(0)
	const entropy_max = password_entropy_characters.length
	const replace_min = Math.floor(0)
	const replace_max = Math.ceil(password_length)
	let replaced_used = []
	let tmp_password = getBase64().split('')

	if (password_entropy_cycles > password_length) {
		password_entropy_cycles = password_length
	}

	for (let cycle=0, tmp_replace_rand=0, tmp_entropy_rand=0; cycle < password_entropy_cycles; cycle++) {
		tmp_replace_rand = getRandomNumber(replace_min, replace_max)
		tmp_entropy_rand = getRandomNumber(entropy_min, entropy_max)

		if (replaced_used.indexOf(tmp_replace_rand)) { 
			do { 
				tmp_replace_rand = getRandomNumber(replace_min, replace_max)
			} while (replaced_used.indexOf(tmp_replace_rand) !== -1)
		}

		replaced_used.push(tmp_replace_rand)
		tmp_password[tmp_replace_rand] = password_entropy_characters[tmp_entropy_rand]
	}

	return tmp_password.join('');
}

function runStressTest() { 

	let used_passwords = []
	let found_duplicate = false
	let duplicates = []
	for (let passi=0, temp_pass=''; passi < 10000; passi++) {
		temp_pass = getRandomPassword()
		if (used_passwords.indexOf(temp_pass) === -1) {
			used_passwords.push(temp_pass)
		} else {
			found_duplicate = true
			duplicates.push(temp_pass)
		}
	}

	if (found_duplicate) {
		const duplicate_text = duplicates.join('\n') + '\n found (' + 
					duplicates.length + ') duplicate passwords \n\r'
		fs.writeSync(1, duplicate_text, null, duplicate_text.length)
	} else {
		const used_text = used_passwords.join('\n') + '\n\r' +
			'generated ' + used_passwords.length + ' passwords with no duplicates \n\r'
		fs.writeSync(1, used_text, null, used_text.length)
	}
}


process.argv.map((arg, argi, args) => {
	if (arg.startsWith('-l')) {
		password_length = Number(getSlice(arg))
	} else if (arg.startsWith('-e')) {
		password_entropy_cycles = Number(getSlice(arg))
	} else if (arg.startsWith('-h') && isHelpIsh(getSlice(arg))) {
		getHelp()
		process.exit()
	} else if (arg.startsWith('--stress-test')) {
		runStressTest()
		process.exit()
	}
})

console.log(getRandomPassword())
